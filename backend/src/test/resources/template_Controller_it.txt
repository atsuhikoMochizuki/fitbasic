package fr.inote.inoteApi.integrationTest;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.icegreen.greenmail.configuration.GreenMailConfiguration;
import com.icegreen.greenmail.junit5.GreenMailExtension;
import com.icegreen.greenmail.store.FolderException;
import com.icegreen.greenmail.util.ServerSetupTest;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;

/**
 * Integration tests of Endpoints
 *
 * @author A.Mochizuki
 * @date 10/04/2024
 */

/*The @SpringBootTest annotation is used for integration testing in Spring Boot applications.
 * It helps in bootstrapping the application context required for testing */
@SpringBootTest

/*
 * The @ActiveProfiles annotation in Spring is used to declare which active bean
 * definition profiles
 * should be used when loading an ApplicationContext for test classes
 */
//@ActiveProfiles("test")
public class CommentController2 {

    /* JUNIT5 EXTENSIONS ACCESS AS OBJECT */
    /* ============================================================ */
    // GreenMail (smtp server mocking)
    @RegisterExtension
    static final GreenMailExtension greenMail = new GreenMailExtension(ServerSetupTest.SMTP)
            .withConfiguration(GreenMailConfiguration.aConfig().withUser("duke", "springboot"))
            .withPerMethodLifecycle(false);

    /* DEPENDENCIES */
    /* ============================================================ */
    @Autowired
    private WebApplicationContext context;

    @Autowired
    private ObjectMapper objectMapper;

    /* TEST VARIABLES */
    /* ============================================================ */
    /*
     * MockMvc provides a convenient way to send requests to your application and
     * inspect the
     * responses, allowing you to verify the behavior of your controllers in
     * isolation.
     * -> Will be configured initialized before each test
     */
    private MockMvc mockMvc;
    private String bearerAuthorization;

    /* FIXTURES */
    /* ============================================================ */
    @BeforeEach
    void setUp() throws Exception {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).build();
        this.bearerAuthorization = this.connectUserAndReturnBearer();
    }

    @AfterEach
    void tearDown() throws FolderException {
        // Clean database

        // Clean mailBox
        CommentController_IT.greenMail.purgeEmailFromAllMailboxes();
    }

    /* CONTROLLER INTEGRATION TESTS */
    /* ============================================================ */
    
    // => Example
    // @Test
    // @DisplayName("Create a comment with message not empty")
    // void IT_create_shouldSuccess_whenMessageIsNotEmpty() throws Exception {

    //     /* Act */
    //     // Send request, print response, check returned status and primary checking
    //     // (status code, content body type...)
    //     ResultActions response = this.mockMvc.perform(post(Endpoint.CREATE_COMMENT)
    //             .header("authorization", "Bearer " + this.bearerAuthorization)
    //             .contentType(MediaType.APPLICATION_JSON_VALUE)
    //             .content(this.objectMapper.writeValueAsString(this.commentDtoRequestRef)))
    //             .andExpect(MockMvcResultMatchers.status().isCreated());

    //     // Get serialized results
    //     MvcResult result = response.andReturn();
    //     String serializedResult = result.getResponse().getContentAsString();

    //     // Deserialization results
    //     CommentDtoResponse returnedComment = this.objectMapper.readValue(serializedResult,
    //             CommentDtoResponse.class);

    //     /* Assert */
    //     assertThat(returnedComment.message()).isEqualTo(this.commentRef.getMessage());
    // }

    
    @Test
    @DisplayName("")
    void IT_method_Should_When() throws Exception {

        /* Act */
        // Send request, print response, check returned status and primary checking
        // (status code, content body type...)
       
        // Get serialized results
       

        // Deserialization results
        

        /* Assert */
        
    }

    /* UTILS */
    /* ============================================================ */

    /**
     * Connect an user to application and return token value
     *
     * @return token value
     * @throws Exception when anomaly occurs
     * @date 11/04/2024
     * @author A.Mochizuki
     */
    private String connectUserAndReturnBearer() throws Exception {
        // final String[] messageContainingCode = new String[1];
        // this.mockMvc.perform(
        //         post(Endpoint.REGISTER)
        //                 .contentType(MediaType.APPLICATION_JSON_VALUE)
        //                 .content(this.objectMapper.writeValueAsString(this.userDtoRef)));
        // await()
        //         .atMost(5, SECONDS)
        //         .untilAsserted(() -> {
        //             MimeMessage[] receivedMessages = greenMail.getReceivedMessages();
        //             assertThat(receivedMessages.length).isEqualTo(1);

        //             MimeMessage receivedMessage = receivedMessages[0];

        //             messageContainingCode[0] = GreenMailUtil.getBody(receivedMessage);
        //             assertThat(messageContainingCode[0]).contains(EMAIL_SUBJECT_ACTIVATION_CODE);
        //         });

        // final String reference = "activation code : ";
        // int startSubstring = messageContainingCode[0].indexOf(reference);
        // int startIndexOfCode = startSubstring + reference.length();
        // int endIndexOfCode = startIndexOfCode + 6;
        // String extractedCode = messageContainingCode[0].substring(startIndexOfCode, endIndexOfCode);
        // Map<String, String> bodyRequest = new HashMap<>();
        // bodyRequest.put("code", extractedCode);

        // ResultActions response = this.mockMvc.perform(
        //         post(Endpoint.ACTIVATION)
        //                 .contentType(MediaType.APPLICATION_JSON_VALUE)
        //                 .content(this.objectMapper.writeValueAsString(bodyRequest)));
        // response
        //         .andExpect(MockMvcResultMatchers.status().isOk())
        //         .andExpect(content().string(MessagesEn.ACTIVATION_OF_USER_OK));
        // Map<String, String> signInBodyContent = new HashMap<>();
        // signInBodyContent.put("username", this.userDtoRef.username());
        // signInBodyContent.put("password", this.userDtoRef.password());

        // response = this.mockMvc.perform(
        //         post(Endpoint.SIGN_IN)
        //                 .contentType(MediaType.APPLICATION_JSON_VALUE)
        //                 .content(this.objectMapper.writeValueAsString(signInBodyContent)));
        // response.andExpect(MockMvcResultMatchers.status().isOk())
        //         .andExpect(content().contentType(MediaType.APPLICATION_JSON))
        //         .andExpect(jsonPath("$.bearer").isNotEmpty())
        //         .andExpect(jsonPath("$.refresh").isNotEmpty());

        // String returnedResponse = response.andReturn().getResponse().getContentAsString();
        // String bearer = JsonPath.parse(returnedResponse).read("$.bearer");
        // assertThat(bearer.length()).isEqualTo(145);

        // return bearer;
    }
}
